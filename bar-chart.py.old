# TODO
# 1. Add three other figures:
#  i. Bar chart of number of representatives
#  ii. Line graph of mean represnetatives per people
#  iii. Maybe? Map of US highlighting active state
# 2. Use list comprehension for the state_priority_nums calculation

import math
import operator
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.ticker as ticker

state_names = ["California", "Texas", "Florida", "New York", "Pennsylvania", "Illinois", "Ohio", "Georgia", "North Carolina", "Michigan", "New Jersey", "Virginia", "Washington", "Arizona", "Massachusetts", "Tennessee", "Indiana", "Missouri", "Maryland", "Wisconsin", "Colorado", "Minnesota", "South Carolina", "Alabama",
               "Louisiana", "Kentucky", "Oregon", "Oklahoma", "Connecticut", "Utah", "Iowa", "Nevada", "Arkansas", "Mississippi", "Kansas", "New Mexico", "Nebraska", "West Virginia", "Idaho", "Hawaii", "New Hampshire", "Maine", "Montana", "Rhode Island", "Delaware", "South Dakota", "North Dakota", "Alaska", "Vermont", "Wyoming"]
state_pops = [33871648, 20851820, 18976457, 15982378, 12419293, 12281054, 11353140, 9938444, 8414350, 8186453, 8049313, 7078515, 6349097, 6080485, 5894121, 5689283, 5595211, 5363675, 5296486, 5130632, 4919479, 4468976, 4447100, 4301261,
              4041769, 4012012, 3450654, 3421399, 3405565, 2926324, 2844658, 2688418, 2673400, 2233169, 1998257, 1819046, 1808344, 1711263, 1293953, 1274923, 1235786, 1211537, 1048319, 902195, 783600, 754844, 642200, 626932, 608827, 493782]
state_pops_name = dict(zip(state_names, state_pops))

state_reps = [1] * 50
state_reps_name = dict(zip(state_names, state_reps))

state_people_per_seat = []
for index, state in enumerate(state_names):
    state_people_per_seat.append(state_pops[index] / state_reps[index])

mean_people_per_seat = np.mean(state_people_per_seat)
std_dev_people_per_seat = np.std(state_people_per_seat)
state_priority_nums = []
range_people_per_seat = 0

y_pos = np.arange(len(state_names))
x_pos = np.arange(len(state_names))

fig = plt.figure()
axes = plt.axes()

seat_portion = fig.add_subplot(221)

plt.text(0.0, 0.0, "/u/ilikeplanes86", transform=axes.transAxes)
seat_txt = plt.text(0.7, 0.6, f"Seat# 1", transform=axes.transAxes)
state_txt = plt.text(0.7, 0.7, "State: ", transform=axes.transAxes)
mean_txt = plt.text(
    0.7, 0.8, f"Mean: {mean_people_per_seat:,.2f}", transform=axes.transAxes)
std_dev_txt = plt.text(
    0.7, 0.9, f"Std. Dev. {std_dev_people_per_seat}", transform=axes.transAxes)
range_txt = plt.text(
    0.85, 0.9, f"Range: {range_people_per_seat}", transform=axes.transAxes)
mean_line = axes.axhline(y=mean_people_per_seat, xmin=0.0, xmax=1.0, color="r")


barcollection = plt.bar(y_pos, state_people_per_seat,
                        align="center", alpha=0.5)
plt.xticks(x_pos, state_names, rotation="vertical")
plt.ylabel("People/Representative")
plt.yscale("log")
axes.yaxis.set_major_formatter(
    ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
plt.title("CGP Grey Electoral College Spreadsheet graphed.")
plt.subplots_adjust(top=0.926, bottom=0.281, left=0.104,
                    right=0.977, hspace=0.2, wspace=0.2)


def animate(frame):
    if frame < 2:
        return

    print("-" * 45)
    print(f"Seat# {frame}")

    state_priority_nums = []
    for index, state in enumerate(state_names):
        fut_state_reps = state_reps_name[state] + 1
        state_priority_nums.append(
            state_pops_name[state] * (1 / math.sqrt(fut_state_reps * (fut_state_reps - 1))))
    state_priority_name = dict(zip(state_names, state_priority_nums))
    print(f"Priority nums: {state_priority_name}")

    max_state = max(state_priority_name.items(), key=operator.itemgetter(1))[0]
    print(f"Highest priority num: {max_state}")

    state_reps_name[max_state] = state_reps_name[max_state] + 1
    print(f"State reps: {state_reps_name}")

    state_people_per_seat = []
    for index, state in enumerate(state_names):
        state_people_per_seat.append(
            state_pops[index] / state_reps_name[state])

    mean_people_per_seat = np.mean(state_people_per_seat)
    std_dev_people_per_seat = np.std(state_people_per_seat)
    range_people_per_seat = max(state_priority_name.items(), key=operator.itemgetter(
        1))[1] - min(state_priority_name.items(), key=operator.itemgetter(1))[1]

    mean_line.set_xdata([0, 1.0])
    mean_line.set_ydata([mean_people_per_seat])
    mean_txt.set_text(f"Mean: {mean_people_per_seat:,.2f}")
    std_dev_txt.set_text(f"Std. Dev.: {std_dev_people_per_seat:,.2f}")
    range_txt.set_text(f"Range: {range_people_per_seat:,.2f}")

    print(f"People per seat: {state_people_per_seat}")
    for bar, h in zip(barcollection, state_people_per_seat):
        bar.set_height(h)

    seat_txt.set_text(f"Seat# {50 + frame}")
    state_txt.set_text(f"State: {max_state}")

    print("-" * 45)


# account for frame zero
frames = 386
anim = animation.FuncAnimation(
    fig, animate, repeat=False, blit=False, frames=frames, interval=190)

figManager = plt.get_current_fig_manager()
figManager.window.showMaximized()

plt.show()
